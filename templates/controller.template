<?php
namespace App\{{module_name}}\Web;

use System\Exceptions\ValidationException;
use System\Server\Entities\Request;
use App\Layout\Rules\Buttons\AButton;
use System\Exceptions\SqlException;
use App\{{module_name}}\Models\{{class_name}} as Model{{class_name}};

class {{class_name}} {
    protected array $fields = [{{fields}}];

    public function table(Request $request){
        $dashboard = layout()->dashboard();
        $dashboard->getDictionary()->loadFile('modulos');
        $dashboard->setTitle($dashboard->getDictionary()->get("TROCAR TITULO"));
        $dashboard->addBreadcrumb(url()->toRoute('{{module_name}}'), "{{module_name}}");

        $table = layout()->table($dashboard);
        $table->setColumns($this->fields);

        $table->paginate(Model{{class_name}}::instance(),url()->toRoute('{{module_name}}/{{class_name}}/list'),(int)($request->get('page')),100,$request->gets());

        $table->addLink('btn-outline-primary','fas fa-pencil-alt',function($model){
            return url()->toRoute("{{module_name}}/{{class_name}}/form/".$model->{{id}});
        });
        $table->addLink('btn-outline-secondary','fas fa-trash',function($model){
            return url()->toRoute("{{module_name}}/{{class_name}}/delete/".$model->{{id}});
        },function($model){
            return "Tem certeza que deseja deletar esse dado?";
        },function($model){
            return true;
        });

        $table->addButton(layout()->button($dashboard,'add', AButton::BUTTON_PRIMARY)->addAttr('onclick','window.location.href=\''.url()->toRoute('{{module_name}}/{{class_name}}/form')."'")->addAttr('type','button'));

        $dashboard->setContents( $table->html());
        response()->html($dashboard->html());
    }

    public function addForm(){
        $dashboard = layout()->dashboard();
        $dashboard->getDictionary()->loadFile('modulos');
        $dashboard->setTitle($dashboard->getDictionary()->get("TROCAR TITULO"));

        $form = layout()->form($dashboard,url()->toRoute('{{module_name}}/{{class_name}}/add'),"POST",true);
        $form->link('list',url()->toRoute('{{module_name}}/{{class_name}}/list'), AButton::BUTTON_SUCCESS);
        
        foreach ($this->fields as $input){
            $form->input($input, 3);
        }

        $form->button('save',AButton::BUTTON_SUCCESS);

        $dashboard->setContents($form->html());
        response()->html($dashboard->html());
    }

    public function updateForm(Request $request,int $id){
        $model = Model{{class_name}}::instance()->getById($id);
        $dashboard = layout()->dashboard();
        $dashboard->getDictionary()->loadFile('modulos');
        $dashboard->setTitle($dashboard->getDictionary()->get("TROCAR TITULO"));

        $form = layout()->form($dashboard,url()->toRoute('{{module_name}}/{{class_name}}/update/'.$id),"POST",true);
        foreach ($this->fields as $input){
            $form->input($input, 3);
        }

        $form->loadData($model);

        $form->link('list',url()->toRoute('{{module_name}}/{{class_name}}/list'), AButton::BUTTON_SUCCESS); 
        $form->button('save',AButton::BUTTON_SUCCESS);

        $dashboard->setContents($form->html());
        response()->html($dashboard->html());
    }

    public function add(Request $request){
        try{
            $model = Model{{class_name}}::instance();
            $model->setValues($request->posts());
            $model->insert();            
            response()->json(['success'=>true],200);
        }catch(ValidationException $e){
            response()->json(["errors"=>$e->getErrors()],422);
        } catch (SqlException $e) {
            response()->json(["sql"=>$e->getMessage()],500);
        } 
    }

    public function update(Request $request,int $id){ 
        try{
            $model = Model{{class_name}}::instance()->getById($id);
            $model->setValues($request->posts());
            $model->save();
            $model->addLog('Registro alterado com sucesso', $request->getAuth()->getName(), 'Registro alterado'); 
        }catch(ValidationException $e){
            response()->json(["errors"=>$e->getErrors()],422);
        }
        response()->json(['success'=>true],200);
    }

    public function delete (Request $request, int $id){
        try {
            Model{{class_name}}::instance()->getById($id)->delete();
            response()->redirect(url()->toRoute('{{module_name}}/{{class_name}}/list'));
        } catch(ValidationException $e){
            response()->json(["errors"=>$e->getErrors()],422);
        } 
    }
    
}